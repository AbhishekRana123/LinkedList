package com.abhishek;

public class RemoveDuplicateNodes{ 
	private Node head; 
	private static class Node {
		private int value; 
		private Node next; 
		Node(int value) { 
			this.value = value; 
			} 
		} 
	public void addToTheLast(Node node) { 
		if (head == null) {
			head = node; 
		} 
		else { 
			Node temp = head;
			while (temp.next != null) 
				temp = temp.next; 
			temp.next = node; 
			} 
		} 
	public  static void printList(Node head) { 
		Node temp = head; 
		while (temp != null) { 
			System.out.format("%d ", temp.value); 
			temp = temp.next; 
			} 
		System.out.println(); 
		} 
	
	 public Node deleteDuplicates(Node head) {
	        if(head == null || head.next == null)
	            return head;
	 
	        Node prev = head;    
	        Node p = head.next;
	 
	        while(p != null){
	            if(p.value == prev.value){
	                prev.next = p.next;
	                p = p.next;
	                //no change prev
	            }else{
	                prev = p;
	                p = p.next; 
	            }
	        }
	 
	        return head;
	    }
	
	public static void main(String[] args) { 
		RemoveDuplicateNodes list1 = new RemoveDuplicateNodes(); 
		// Creating a linked list 
		Node head1= new Node(1);
		list1.addToTheLast(head1); 
		list1.addToTheLast(new Node(1));
		list1.addToTheLast(new Node(2)); 
		list1.addToTheLast(new Node(2));
		list1.addToTheLast(new Node(2));
		list1.addToTheLast(new Node(3)); 
		list1.addToTheLast(new Node(4)); 
		list1.addToTheLast(new Node(5)); 
		list1.addToTheLast(new Node(1));
		list1.addToTheLast(new Node(5));
		list1.addToTheLast(new Node(5));
		
		System.out.println("Before swapping ..");
		list1.printList(head1); 
		
		Node AfterDeleteNode = list1.deleteDuplicates(head1);
		list1.printList(AfterDeleteNode);
		
				
		
		} 
}

