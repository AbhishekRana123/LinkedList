package com.abhishek;


public class DoPeriodicSwap{ 
	private Node head; 
	private static class Node {
		private int value; 
		private Node next; 
		Node(int value) { 
			this.value = value; 
			} 
		} 
	public void addToTheLast(Node node) { 
		if (head == null) {
			head = node; 
		} 
		else { 
			Node temp = head;
			while (temp.next != null) 
				temp = temp.next; 
			temp.next = node; 
			} 
		} 
	public void printList(Node head) { 
		Node temp = head; 
		while (temp != null) { 
			System.out.format("%d ", temp.value); 
			temp = temp.next; 
			} 
		System.out.println(); 
		} 
	
	public static Node periodiReverseList(Node head,int k){
		Node prev = null;
		Node current = head;
		Node next = null;
		int counter = 0;
		while(current != null && counter < k){
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
			counter++;
		}
		if(next != null){
			head.next = periodiReverseList(next,k);
	      }
		return prev;
	}
	
	public static void main(String[] args) { 
		DoPeriodicSwap list = new DoPeriodicSwap(); 
		// Creating a linked list 
		Node head = new Node(5);
		list.addToTheLast(head); 
		list.addToTheLast(new Node(6)); 
		list.addToTheLast(new Node(7)); 
		list.addToTheLast(new Node(1)); 
		list.addToTheLast(new Node(2)); 
		list.addToTheLast(new Node(10));
		System.out.println("Before Reversing :");
		list.printList(head); 
		
		
		Node reverseHead= list.periodiReverseList(head,3);
		System.out.println("After Reversing :");
		list.printList(reverseHead);
		
		
		} 
}



